// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Authorisation Footer component renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CustomProvider>
    <Connect(withRouter(AuthFooter))
      domStructure={
        Array [
          Object {
            "id": "firstName",
            "name": "firstName",
            "placeholder": "First Name",
            "type": "text",
          },
        ]
      }
      handleChange={[MockFunction]}
      handleSubmit={[MockFunction]}
      isFormCompleted={true}
      title="Sign Up"
      type="signin"
    />
  </CustomProvider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <MemoryRouter>
        <Connect(withRouter(AuthFooter))
          domStructure={
            Array [
              Object {
                "id": "firstName",
                "name": "firstName",
                "placeholder": "First Name",
                "type": "text",
              },
            ]
          }
          handleChange={[MockFunction]}
          handleSubmit={[MockFunction]}
          isFormCompleted={true}
          title="Sign Up"
          type="signin"
        />
      </MemoryRouter>,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Connect(withRouter(AuthFooter))
          domStructure={
            Array [
              Object {
                "id": "firstName",
                "name": "firstName",
                "placeholder": "First Name",
                "type": "text",
              },
            ]
          }
          handleChange={[MockFunction]}
          handleSubmit={[MockFunction]}
          isFormCompleted={true}
          title="Sign Up"
          type="signin"
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "domStructure": Array [
            Object {
              "id": "firstName",
              "name": "firstName",
              "placeholder": "First Name",
              "type": "text",
            },
          ],
          "handleChange": [MockFunction],
          "handleSubmit": [MockFunction],
          "isFormCompleted": true,
          "title": "Sign Up",
          "type": "signin",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <MemoryRouter>
          <Connect(withRouter(AuthFooter))
            domStructure={
              Array [
                Object {
                  "id": "firstName",
                  "name": "firstName",
                  "placeholder": "First Name",
                  "type": "text",
                },
              ]
            }
            handleChange={[MockFunction]}
            handleSubmit={[MockFunction]}
            isFormCompleted={true}
            title="Sign Up"
            type="signin"
          />
        </MemoryRouter>,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Connect(withRouter(AuthFooter))
            domStructure={
              Array [
                Object {
                  "id": "firstName",
                  "name": "firstName",
                  "placeholder": "First Name",
                  "type": "text",
                },
              ]
            }
            handleChange={[MockFunction]}
            handleSubmit={[MockFunction]}
            isFormCompleted={true}
            title="Sign Up"
            type="signin"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "domStructure": Array [
              Object {
                "id": "firstName",
                "name": "firstName",
                "placeholder": "First Name",
                "type": "text",
              },
            ],
            "handleChange": [MockFunction],
            "handleSubmit": [MockFunction],
            "isFormCompleted": true,
            "title": "Sign Up",
            "type": "signin",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
