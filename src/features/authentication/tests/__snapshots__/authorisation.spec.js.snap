// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`authorisation component renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AuthContainer
    authModal={false}
    domStructure={
      Array [
        Object {
          "id": "firstName",
          "name": "firstName",
          "placeholder": "First Name",
          "type": "text",
        },
      ]
    }
    handleChange={[MockFunction]}
    handleSubmit={[MockFunction]}
    isFormCompleted={true}
    title="Sign Up"
    type="signin"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Authentication
        authModal={false}
        classNames=""
        domStructure={
          Array [
            Object {
              "id": "firstName",
              "name": "firstName",
              "placeholder": "First Name",
              "type": "text",
            },
          ]
        }
        handleChange={[MockFunction]}
        handleSubmit={[MockFunction]}
        isFormCompleted={true}
        slideToNextInput={false}
        title="Sign Up"
        type="signin"
      />,
      "className": "pt-2 mx-auto col-lg-4 col-md-6 col-sm-8",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "authModal": false,
        "classNames": "",
        "domStructure": Array [
          Object {
            "id": "firstName",
            "name": "firstName",
            "placeholder": "First Name",
            "type": "text",
          },
        ],
        "handleChange": [MockFunction],
        "handleSubmit": [MockFunction],
        "isFormCompleted": true,
        "slideToNextInput": false,
        "title": "Sign Up",
        "type": "signin",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Authentication
          authModal={false}
          classNames=""
          domStructure={
            Array [
              Object {
                "id": "firstName",
                "name": "firstName",
                "placeholder": "First Name",
                "type": "text",
              },
            ]
          }
          handleChange={[MockFunction]}
          handleSubmit={[MockFunction]}
          isFormCompleted={true}
          slideToNextInput={false}
          title="Sign Up"
          type="signin"
        />,
        "className": "pt-2 mx-auto col-lg-4 col-md-6 col-sm-8",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "authModal": false,
          "classNames": "",
          "domStructure": Array [
            Object {
              "id": "firstName",
              "name": "firstName",
              "placeholder": "First Name",
              "type": "text",
            },
          ],
          "handleChange": [MockFunction],
          "handleSubmit": [MockFunction],
          "isFormCompleted": true,
          "slideToNextInput": false,
          "title": "Sign Up",
          "type": "signin",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
