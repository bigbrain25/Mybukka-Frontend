// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`authorisation component renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Authentication
    handleChange={[MockFunction]}
    handleSubmit={[MockFunction]}
    isFormCompleted={true}
    title="Sign Up"
    type="signin"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Container
          classNames="form-container"
        >
          <Wrapper>
            <h2
              className="text-center pt-4 font-size"
            >
              Sign Up
            </h2>
            <Form
              domStructure={Object {}}
              handleChange={[MockFunction]}
              handleSubmit={[MockFunction]}
              isFormCompleted={true}
              title="Sign Up"
              type="signin"
              validationErrors={Object {}}
            />
          </Wrapper>
        </Container>,
        <logo />,
      ],
      "className": "bg-color full-height",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Wrapper>
            <h2
              className="text-center pt-4 font-size"
            >
              Sign Up
            </h2>
            <Form
              domStructure={Object {}}
              handleChange={[MockFunction]}
              handleSubmit={[MockFunction]}
              isFormCompleted={true}
              title="Sign Up"
              type="signin"
              validationErrors={Object {}}
            />
          </Wrapper>,
          "classNames": "form-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <h2
                className="text-center pt-4 font-size"
              >
                Sign Up
              </h2>,
              <Form
                domStructure={Object {}}
                handleChange={[MockFunction]}
                handleSubmit={[MockFunction]}
                isFormCompleted={true}
                title="Sign Up"
                type="signin"
                validationErrors={Object {}}
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Sign Up",
                "className": "text-center pt-4 font-size",
              },
              "ref": null,
              "rendered": "Sign Up",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "domStructure": Object {},
                "handleChange": [MockFunction],
                "handleSubmit": [MockFunction],
                "isFormCompleted": true,
                "title": "Sign Up",
                "type": "signin",
                "validationErrors": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Container
            classNames="form-container"
          >
            <Wrapper>
              <h2
                className="text-center pt-4 font-size"
              >
                Sign Up
              </h2>
              <Form
                domStructure={Object {}}
                handleChange={[MockFunction]}
                handleSubmit={[MockFunction]}
                isFormCompleted={true}
                title="Sign Up"
                type="signin"
                validationErrors={Object {}}
              />
            </Wrapper>
          </Container>,
          <logo />,
        ],
        "className": "bg-color full-height",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Wrapper>
              <h2
                className="text-center pt-4 font-size"
              >
                Sign Up
              </h2>
              <Form
                domStructure={Object {}}
                handleChange={[MockFunction]}
                handleSubmit={[MockFunction]}
                isFormCompleted={true}
                title="Sign Up"
                type="signin"
                validationErrors={Object {}}
              />
            </Wrapper>,
            "classNames": "form-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <h2
                  className="text-center pt-4 font-size"
                >
                  Sign Up
                </h2>,
                <Form
                  domStructure={Object {}}
                  handleChange={[MockFunction]}
                  handleSubmit={[MockFunction]}
                  isFormCompleted={true}
                  title="Sign Up"
                  type="signin"
                  validationErrors={Object {}}
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Sign Up",
                  "className": "text-center pt-4 font-size",
                },
                "ref": null,
                "rendered": "Sign Up",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "domStructure": Object {},
                  "handleChange": [MockFunction],
                  "handleSubmit": [MockFunction],
                  "isFormCompleted": true,
                  "title": "Sign Up",
                  "type": "signin",
                  "validationErrors": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
