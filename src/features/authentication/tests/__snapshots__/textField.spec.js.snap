// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input field component renders properly 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <TextField
    domStructure={
      Array [
        Object {
          "id": "firstName",
          "name": "firstName",
          "placeholder": "First Name",
          "type": "text",
        },
      ]
    }
    handleChange={[MockFunction]}
    validationErrors={
      Object {
        "firstName": "",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "domStructure": Array [
        Object {
          "id": "firstName",
          "name": "firstName",
          "placeholder": "First Name",
          "type": "text",
        },
      ],
      "handleChange": [MockFunction],
      "validationErrors": Object {
        "firstName": "",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="form-group padding"
      >
        <input
          class="default-input"
          name="firstName"
          placeholder="First Name"
          type="text"
          value=""
        />
        <div
          class="text-danger help-block"
        />
      </div>,
      "key": "firstName",
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <InputField
            classNames="default-input"
            defaultValue=""
            handleChange={[MockFunction]}
            handleFocus={[Function]}
            name="firstName"
            placeholderText="First Name"
            type="text"
          />,
          <HelpBlock
            errorMsg=""
          />,
        ],
        "className": "form-group padding",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "classNames": "default-input",
            "defaultValue": "",
            "handleChange": [MockFunction],
            "handleFocus": [Function],
            "name": "firstName",
            "placeholderText": "First Name",
            "type": "text",
          },
          "ref": null,
          "rendered": Object {
            "instance": <input
              class="default-input"
              name="firstName"
              placeholder="First Name"
              type="text"
              value=""
            />,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "default-input",
              "defaultValue": "",
              "name": "firstName",
              "onChange": [MockFunction],
              "onFocus": [Function],
              "placeholder": "First Name",
              "type": "text",
            },
            "ref": null,
            "rendered": Array [
              undefined,
            ],
            "type": "input",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "errorMsg": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": <div
              class="text-danger help-block"
            />,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "",
              "className": "text-danger help-block",
            },
            "ref": null,
            "rendered": Array [
              "",
            ],
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "domStructure": Array [
          Object {
            "id": "firstName",
            "name": "firstName",
            "placeholder": "First Name",
            "type": "text",
          },
        ],
        "handleChange": [MockFunction],
        "validationErrors": Object {
          "firstName": "",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="form-group padding"
        >
          <input
            class="default-input"
            name="firstName"
            placeholder="First Name"
            type="text"
            value=""
          />
          <div
            class="text-danger help-block"
          />
        </div>,
        "key": "firstName",
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <InputField
              classNames="default-input"
              defaultValue=""
              handleChange={[MockFunction]}
              handleFocus={[Function]}
              name="firstName"
              placeholderText="First Name"
              type="text"
            />,
            <HelpBlock
              errorMsg=""
            />,
          ],
          "className": "form-group padding",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "classNames": "default-input",
              "defaultValue": "",
              "handleChange": [MockFunction],
              "handleFocus": [Function],
              "name": "firstName",
              "placeholderText": "First Name",
              "type": "text",
            },
            "ref": null,
            "rendered": Object {
              "instance": <input
                class="default-input"
                name="firstName"
                placeholder="First Name"
                type="text"
                value=""
              />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "default-input",
                "defaultValue": "",
                "name": "firstName",
                "onChange": [MockFunction],
                "onFocus": [Function],
                "placeholder": "First Name",
                "type": "text",
              },
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "input",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "errorMsg": "",
            },
            "ref": null,
            "rendered": Object {
              "instance": <div
                class="text-danger help-block"
              />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "className": "text-danger help-block",
              },
              "ref": null,
              "rendered": Array [
                "",
              ],
              "type": "div",
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
