// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button component renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    classNames="small-button"
    dataTarget=""
    dataToggle=""
    disabled={false}
    handleClick={[MockFunction]}
    id="b0WfM7AZ3"
    text="SIGN IN"
    type="button"
  >
    <div />
  </Button>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": "SIGN IN",
      "className": "small-button",
      "data-target": "",
      "data-testid": "button",
      "data-toggle": "",
      "disabled": false,
      "id": "b0WfM7AZ3",
      "onClick": [MockFunction],
      "type": "button",
    },
    "ref": null,
    "rendered": "SIGN IN",
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "SIGN IN",
        "className": "small-button",
        "data-target": "",
        "data-testid": "button",
        "data-toggle": "",
        "disabled": false,
        "id": "b0WfM7AZ3",
        "onClick": [MockFunction],
        "type": "button",
      },
      "ref": null,
      "rendered": "SIGN IN",
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
